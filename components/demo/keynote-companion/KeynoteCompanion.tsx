/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import React, { useEffect, useRef, useState } from "react";
import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
// Pas de Header ici (il est rendu ailleurs)
import { useUser, useUI } from "@/lib/state";

// ---------------- API KEY ----------------
const API_KEY =
  import.meta.env.VITE_API_KEY ||
  import.meta.env.VITE_GEMINI_API_KEY ||
  import.meta.env.GEMINI_API_KEY ||
  "";

let ai: GoogleGenAI | null = null;
if (API_KEY) ai = new GoogleGenAI({ apiKey: API_KEY });

// ---------------- Types ----------------
type ConversationStage =
  | "GREETING"
  | "AWAITING_CONTRACEPTION"
  | "AWAITING_PRODUCT"
  | "PROCESSING"
  | "DONE";

type InteractionLevel = "faible" | "moyen" | "grave" | "inconnu";

type Message = {
  id: string;
  sender: "bot" | "user";
  text?: string;
  analysis?: InteractionResult;
};

type InteractionResult = {
  interactionLevel: InteractionLevel;
  title: string;
  explanation: string;
  scientificBasis: string;
  sources: { name: string; url: string }[];
  contraceptionImpact: string;
  recommendation: { timing: string; alternative: string };
};

// ---------------- Small UI helpers ----------------
function badgeMeta(level: InteractionLevel) {
  switch (level) {
    case "faible": return { emoji: "üü¢", label: "Faible" };
    case "moyen":  return { emoji: "üü†", label: "Mod√©r√©e" };
    case "grave":  return { emoji: "üî¥", label: "√âlev√©e" };
    default:       return { emoji: "‚ö™", label: "Inconnue" };
  }
}
const uid = () => `${Date.now()}-${Math.random()}`;

// ---------------- Fuzzy utils ----------------
function deburr(str: string) {
  return str.normalize("NFD").replace(/\p{Diacritic}/gu, "").toLowerCase();
}
function editDistance(a: string, b: string) {
  const A = deburr(a), B = deburr(b);
  const al = A.length, bl = B.length;
  const dp = Array.from({ length: al + 1 }, () => Array(bl + 1).fill(0));
  for (let i = 0; i <= al; i++) dp[i][0] = i;
  for (let j = 0; j <= bl; j++) dp[0][j] = j;
  for (let i = 1; i <= al; i++) {
    for (let j = 1; j <= bl; j++) {
      const cost = A[i - 1] === B[j - 1] ? 0 : 1;
      dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);
      if (i > 1 && j > 1 && A[i - 1] === B[j - 2] && A[i - 2] === B[j - 1]) {
        dp[i][j] = Math.min(dp[i][j], dp[i - 2][j - 2] + 1);
      }
    }
  }
  return dp[al][bl];
}
const similar = (a: string, b: string, maxEdits = 2) => editDistance(a, b) <= maxEdits;

// ---------------- Product normalization + KB ----------------
function normalizeProduct(raw: string): { canonical: string; synonyms: string[] } {
  const s0 = raw.trim();
  const s = deburr(
    s0
      .replace(/\b(lea nature|arkopharma|nutrivita|solgar|pileje|biocyte|phyto|bio|capsules?|gelules?|g√©lules?|complement|compl√©ment|cure|mois|pack|programme)\b/gi, " ")
      .replace(/[^\p{Letter}\p{Number}\s]/gu, " ")
      .replace(/\s+/g, " ")
  );
  const rows = [
    { canonical: "millepertuis (Hypericum perforatum)", synonyms: ["millepertuis","hypericum","hypericum perforatum","st john","st. john","millerptuis","milepertuis","milleperuis","millepertui","milleperthuis"] },
    { canonical: "fer (sels ferreux: sulfate, gluconate)", synonyms: ["fer","cure de fer","complement fer","compl√©ment fer","fer bisglycinate","sulfate de fer","gluconate de fer"] },
    { canonical: "parac√©tamol", synonyms: ["paracetamol","parac√©tamol","doliprane","efferalgan","dafalgan"] },
    { canonical: "ibuprof√®ne", synonyms: ["ibuprofene","ibuprofen","nurofen","advil"] },
    { canonical: "rifampicine", synonyms: ["rifampicine","rifampin"] },
    { canonical: "charbon activ√©", synonyms: ["charbon","charbon active","charcoal","activated charcoal"] },
    { canonical: "l√©vothyroxine", synonyms: ["levothyrox","levothyroxine","levothyrox"] },
    { canonical: "amoxicilline", synonyms: ["amoxicilline","amoxicillin"] },
    { canonical: "vitamine c (acide ascorbique)", synonyms: ["vitamine c","acide ascorbique","vit c"] },
    { canonical: "collag√®ne", synonyms: ["collagene","cure collagene","luxeol","luxeol 3 mois","lux√©ol","collag√®ne"] },
  ];
  for (const row of rows) {
    if (row.synonyms.some(k => s.includes(deburr(k)))) return row;
    if (row.synonyms.some(k => similar(s, k))) return row;
    const tokens = s.split(/\s+/);
    if (row.synonyms.some(k => tokens.some(t => similar(t, k)))) return row;
  }
  return { canonical: s0.trim(), synonyms: [] };
}

type KBItem = InteractionResult;
const LOCAL_KB: Record<string, KBItem> = {
  "fer (sels ferreux: sulfate, gluconate)": {
    interactionLevel: "faible",
    title: "Fer et contraception hormonale : pas d'interaction cliniquement significative",
    explanation: "Le fer est absorb√© dans l‚Äôintestin et n‚Äôactive pas les enzymes du foie qui √©liminent les hormones de la pilule.",
    scientificBasis: "Bas√© sur la litt√©rature pharmacologique et l‚Äôabsence de signal d‚Äôinteraction dans ANSM, Vidal et DrugBank.",
    sources: [
      { name: "ANSM ‚Äì Monographies", url: "https://ansm.sante.fr" },
      { name: "Vidal ‚Äì Interactions", url: "https://www.vidal.fr" },
      { name: "DrugBank ‚Äì Ferrous sulfate", url: "https://go.drugbank.com" },
    ],
    contraceptionImpact: "Aucun effet attendu sur les voies m√©taboliques des estroprogestatifs.",
    recommendation: { timing: "Aucun espacement n√©cessaire pour la contraception. Tu peux espacer pour le confort digestif (√©vite caf√©/th√© juste avant).", alternative: "" },
  },
  "millepertuis (Hypericum perforatum)": {
    interactionLevel: "grave",
    title: "Millepertuis et contraception : interaction majeure",
    explanation: "Le millepertuis acc√©l√®re l‚Äô√©limination de nombreux m√©dicaments (CYP3A4, P-gp).",
    scientificBasis: "Interaction bien document√©e par les agences de sant√©.",
    sources: [
      { name: "ANSM ‚Äì Avertissements Millepertuis", url: "https://ansm.sante.fr" },
      { name: "EMA ‚Äì Monograph: St John‚Äôs wort", url: "https://www.ema.europa.eu" },
    ],
    contraceptionImpact: "Baisse des taux hormonaux ‚Üí risque de grossesse.",
    recommendation: { timing: "√âvite l‚Äôassociation. Si d√©j√† pris : pr√©servatif pendant la prise + 2 semaines apr√®s l‚Äôarr√™t.", alternative: "Options non inductrices pour l‚Äôhumeur/sommeil (ex. magn√©sium, m√©latonine courte dur√©e) ‚Äî √† valider avec un pro." },
  },
  rifampicine: {
    interactionLevel: "grave",
    title: "Rifampicine et contraception : interaction majeure",
    explanation: "Puissant inducteur enzymatique : les concentrations d‚Äô√©thinylestradiol/progestatifs chutent fortement.",
    scientificBasis: "Interaction classique et bien connue.",
    sources: [
      { name: "ANSM ‚Äì Rifampicine", url: "https://ansm.sante.fr" },
      { name: "Vidal ‚Äì Interactions rifampicine", url: "https://www.vidal.fr" },
    ],
    contraceptionImpact: "Risque √©lev√© d‚Äô√©chec contraceptif.",
    recommendation: { timing: "√âviter avec les pilules classiques. Double protection pendant la cure + 4 semaines apr√®s.", alternative: "M√©thodes moins d√©pendantes du CYP (DIU cuivre/hormonal) ‚Äî √† discuter avec un pro." },
  },
  parac√©tamol: {
    interactionLevel: "faible",
    title: "Parac√©tamol et contraception : pas d'interaction significative",
    explanation: "Aux doses usuelles, le parac√©tamol n‚Äôalt√®re pas significativement le m√©tabolisme des estroprogestatifs.",
    scientificBasis: "Consensus monographies et bases d‚Äôinteractions.",
    sources: [
      { name: "ANSM ‚Äì Parac√©tamol", url: "https://ansm.sante.fr" },
      { name: "Vidal ‚Äì Parac√©tamol", url: "https://www.vidal.fr" },
    ],
    contraceptionImpact: "Aucun impact attendu sur l‚Äôefficacit√©.",
    recommendation: { timing: "Aucun espacement n√©cessaire.", alternative: "" },
  },
  "charbon activ√©": {
    interactionLevel: "moyen",
    title: "Charbon activ√© et contraception : possible r√©duction de l‚Äôabsorption",
    explanation: "Le charbon adsorbe des mol√©cules dans l‚Äôintestin. Pris trop pr√®s de la pilule, il peut en diminuer l‚Äôabsorption.",
    scientificBasis: "Principe d‚Äôadsorption intestinal document√©.",
    sources: [{ name: "ANSM ‚Äì Charbon activ√©", url: "https://ansm.sante.fr" }],
    contraceptionImpact: "Risque de moindre absorption si prises concomitantes.",
    recommendation: { timing: "S√©pare d‚Äôau moins 3‚Äì4 heures avec la pilule. Si prises trop proches : pr√©servatif 7 jours.", alternative: "" },
  },
  "vitamine c (acide ascorbique)": {
    interactionLevel: "faible",
    title: "Vitamine C et contraception : pas d'interaction significative",
    explanation: "Aux doses usuelles, pas d‚Äôinduction ni d‚Äôinhibition notable du m√©tabolisme des estroprogestatifs.",
    scientificBasis: "Absence de signal d‚Äôinteraction dans les bases majeures.",
    sources: [
      { name: "ANSM ‚Äì Vitamine C", url: "https://ansm.sante.fr" },
      { name: "Vidal ‚Äì Vitamine C", url: "https://www.vidal.fr" },
    ],
    contraceptionImpact: "Aucun impact significatif attendu.",
    recommendation: { timing: "Aucun espacement n√©cessaire.", alternative: "" },
  },
  collag√®ne: {
    interactionLevel: "faible",
    title: "Collag√®ne et contraception : pas d'interaction attendue",
    explanation: "Prot√©ines/peptides sans effet inducteur ou inhibiteur document√© sur le m√©tabolisme des hormones de la pilule.",
    scientificBasis: "Absence de signal d‚Äôinteraction dans la litt√©rature et bases.",
    sources: [
      { name: "ANSM ‚Äì Compl√©ments", url: "https://ansm.sante.fr" },
      { name: "Vidal ‚Äì Compl√©ments", url: "https://www.vidal.fr" },
    ],
    contraceptionImpact: "Impact n√©gligeable attendu.",
    recommendation: { timing: "Pas de contrainte particuli√®re.", alternative: "" },
  },
};

// ---------------- Retry wrapper ----------------
async function withRetry<T>(fn: () => Promise<T>, attempts = 3, baseDelayMs = 600): Promise<T> {
  let lastErr: any;
  for (let i = 0; i < attempts; i++) {
    try { return await fn(); }
    catch (err: any) {
      lastErr = err;
      const msg = err?.message || "";
      const isOverloaded =
        /UNAVAILABLE|overloaded|quota|ECONNRESET|ETIMEDOUT|ENETUNREACH|fetch failed/i.test(msg) ||
        err?.error?.status === "UNAVAILABLE" ||
        err?.error?.code === 503;
      if (!isOverloaded || i === attempts - 1) break;
      const backoff = baseDelayMs * Math.pow(2, i) + Math.random() * 150;
      await new Promise(r => setTimeout(r, backoff));
    }
  }
  throw lastErr;
}

// ---------------- Helpers (parsing/cleanup) ----------------
function stripCodeFences(s: string) {
  const fenceRegex = /^```(?:json)?\s*([\s\S]*?)\s*```$/i;
  const m = s.match(fenceRegex);
  return m?.[1]?.trim() ?? s.trim();
}
function tryParseJsonLoose(txt: string): any | null {
  try { return JSON.parse(txt); }
  catch {
    const fixed = txt.replace(/,\s*([}\]])/g, "$1");
    try { return JSON.parse(fixed); }
    catch { return null; }
  }
}
function sanitizeSources(sources: { name: string; url: string }[] | undefined) {
  if (!Array.isArray(sources)) return [];
  return sources.filter((s) => typeof s?.url === "string" && /^https?:\/\//i.test(s.url));
}
const nonEmpty = (s?: string) => !!s && s.trim().length > 0;

// ---------------- Component ----------------
export default function KeynoteCompanion() {
  const { contraceptive, intakeTime, setContraceptive, setIntakeTime } = useUser();
  const { isBotTyping, setIsBotTyping } = useUI();

  // ‚úÖ seed des 2 messages de bienvenue dans l‚Äô√©tat initial
  const [messages, setMessages] = useState<Message[]>([
    { id: uid(), sender: "bot", text: "Bonjour ! Je suis Lou, ton assistante personnelle de sant√© ü§ù" },
    { id: uid(), sender: "bot", text: "Quelle contraception utilises-tu, et √† quelle heure tu la prends ? (ou dis-moi si c‚Äôest une diffusion continue) ‚è∞" },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [conversationStage, setConversationStage] = useState<ConversationStage>("AWAITING_CONTRACEPTION");
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  // üîí refs qui suivent la valeur R√âELLE au moment du submit
  const contraceptiveRef = useRef<string | undefined>(contraceptive);
  const intakeTimeRef   = useRef<string | undefined>(intakeTime);
  useEffect(() => { contraceptiveRef.current = contraceptive; }, [contraceptive]);
  useEffect(() => { intakeTimeRef.current = intakeTime; }, [intakeTime]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };
  useEffect(scrollToBottom, [messages, isBotTyping]);

  function addBotMessage(text: string, analysis?: InteractionResult) {
    setMessages((prev) => [...prev, { id: uid(), sender: "bot", text, analysis }]);
  }
  function addUserMessage(text: string) {
    const m: Message = { id: uid(), sender: "user", text };
    setMessages((prev) => [...prev, m]);
    return m;
  }

  async function handleSendMessage(e: React.FormEvent) {
    e.preventDefault();
    if (!inputValue.trim() || isBotTyping) return;

    addUserMessage(inputValue);
    const currentUserInput = inputValue.trim();
    setInputValue("");

    if (conversationStage === "AWAITING_CONTRACEPTION") {
      setIsBotTyping(true);

      const isContinuous = /diffusion continue|implant|st√©rilet|sterilet|patch|anneau/i.test(currentUserInput);
      const timeMatch = currentUserInput.match(/(?:\b(?:√†|a|@|vers)\s*)?([01]?\d|2[0-3])\s*h(?:([0-5]\d))?/i);
      const timeText = timeMatch ? `${timeMatch[1]}h${timeMatch[2] ? timeMatch[2] : ""}` : "";

      let brandRaw = currentUserInput
        .replace(/(?:\b(?:√†|a|@|vers)\s*)?([01]?\d|2[0-3])\s*h(?:([0-5]\d))?/gi, "")
        .replace(/\bet\b/gi, " ")
        .replace(/[,\.;:]/g, " ")
        .replace(/\s+/g, " ")
        .trim();
      const normalizeMap: Record<string, string> = {
        "ludeal g": "Lud√©al G√©", "ludeal ge": "Lud√©al G√©", ludeal: "Lud√©al G√©",
        leeloo: "Leeloo", optilova: "Optilova", minidril: "Minidril", jasminelle: "Jasminelle",
        desogestrel: "D√©sogestrel", optimizette: "Optimizette", trinordiol: "Trinordiol",
      };
      const brand = normalizeMap[brandRaw.toLowerCase()] || brandRaw;

      const haveBrand = nonEmpty(brand);
      const haveTime  = nonEmpty(timeText);
      const haveBrandState = nonEmpty(contraceptiveRef.current);
      const haveTimeState  = nonEmpty(intakeTimeRef.current);

      // 1) dispositifs en diffusion continue
      if (isContinuous) {
        setContraceptive(brand || "Contraception √† diffusion continue");
        setIntakeTime("Diffusion continue");
        addBotMessage("Merci, c‚Äôest not√© : contraception √† diffusion continue ‚úÖ");
        addBotMessage("Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä");
        setIsBotTyping(false);
        setConversationStage("AWAITING_PRODUCT");
        return;
      }

      // 2) marque + heure dans le m√™me message
      if (haveBrand && haveTime) {
        setContraceptive(brand);
        setIntakeTime(timeText);
        addBotMessage(`Parfait, c‚Äôest not√© : ${brand} √† ${timeText} ‚úÖ`);
        addBotMessage("Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä");
        setIsBotTyping(false);
        setConversationStage("AWAITING_PRODUCT");
        return;
      }

      // 3) marque seule
      if (haveBrand && !haveTime) {
        setContraceptive(brand);
        if (haveTimeState) {
          addBotMessage(`Parfait, c‚Äôest not√© : ${brand} √† ${intakeTimeRef.current} ‚úÖ`);
          addBotMessage("Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä");
          setIsBotTyping(false);
          setConversationStage("AWAITING_PRODUCT");
        } else {
          addBotMessage(`Super, tu utilises ${brand}. √Ä quelle heure la prends-tu ? (ex : 8h ou 20h) ‚è∞`);
          setIsBotTyping(false);
        }
        return;
      }

      // 4) heure seule
      if (!haveBrand && haveTime) {
        setIntakeTime(timeText);
        if (haveBrandState) {
          addBotMessage(`Parfait, c‚Äôest not√© : ${contraceptiveRef.current} √† ${timeText} ‚úÖ`);
          addBotMessage("Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä");
          setIsBotTyping(false);
          setConversationStage("AWAITING_PRODUCT");
        } else {
          addBotMessage("Merci ! Et peux-tu me pr√©ciser la marque ou le type de ta contraception ? (ex : Leeloo, Optilova, implant‚Ä¶)");
          setIsBotTyping(false);
        }
        return;
      }

      // 5) rien de compr√©hensible
      addBotMessage("Tu peux me dire la marque/type de ta contraception ET l‚Äôheure de prise ? Par ex. : Leeloo √† 8h, Optilova √† 20h, ou implant (diffusion continue).");
      setIsBotTyping(false);
      return;
    }

    if (conversationStage === "AWAITING_PRODUCT") {
      setConversationStage("PROCESSING");
      setIsBotTyping(true);
      await handleCheckInteraction(currentUserInput);
      setIsBotTyping(false);
      setConversationStage("AWAITING_PRODUCT");
      return;
    }
  }

  function adaptAnalysisToContext(result: InteractionResult): InteractionResult {
    const isContinuous =
      (intakeTimeRef.current || "").toLowerCase().includes("diffusion") ||
      /implant|anneau|patch|st√©rilet|sterilet/i.test(contraceptiveRef.current || "");

    const out: InteractionResult = {
      ...result,
      sources: sanitizeSources(result.sources),
      recommendation: { ...result.recommendation },
    };

    if (!nonEmpty(out.recommendation.timing)) {
      if (result.interactionLevel === "faible") out.recommendation.timing = "Aucun espacement n√©cessaire.";
      else if (result.interactionLevel === "moyen") out.recommendation.timing = "S√©pare d‚Äôau moins 3‚Äì4 heures avec ta contraception.";
      else if (result.interactionLevel === "grave") out.recommendation.timing = "√âvite l‚Äôassociation. Utilise une m√©thode barri√®re et demande conseil √† un pro de sant√©.";
      else out.recommendation.timing = "Donn√©es limit√©es : demande l‚Äôavis de ton pharmacien/m√©decin.";
    }

    if (isContinuous && result.interactionLevel !== "faible") {
      out.explanation = `${out.explanation} Dans ton cas (diffusion continue), le risque peut concerner toute la dur√©e d‚Äôaction du dispositif.`;
    }

    return out;
  }

  // --------------- IA + KB + Retry ----------------
  async function handleCheckInteraction(product: string) {
    if (!product?.trim()) {
      addBotMessage("Peux-tu me donner le nom du m√©dicament ou compl√©ment √† v√©rifier ? üòä");
      return;
    }

    const norm = normalizeProduct(product);
    const canonical = norm.canonical;
    const kbHit = LOCAL_KB[canonical];
    if (kbHit) {
      addBotMessage("Merci d'avoir patient√©. Voici l'analyse :", adaptAnalysisToContext(kbHit));
      return;
    }

    if (!ai) {
      addBotMessage("D√©sol√©e, je ne peux pas faire la v√©rification pour le moment. Cl√© API manquante.");
      return;
    }

    const prompt = `
Tu es "Lou", une coach sant√© claire et rassurante. Tu analyses l'interaction entre une contraception hormonale et un produit.
R√©ponds en UN SEUL objet JSON strict (pas de Markdown), en fran√ßais, avec ce sch√©ma :
{
  "interactionLevel": "faible" | "moyen" | "grave" | "inconnu",
  "title": "verdict court et clair",
  "explanation": "vulgarisation simple : 2-3 phrases max (tutoie)",
  "scientificBasis": "phrase sur les sources utilis√©es",
  "sources": [ { "name": "nom source", "url": "https://..." } ],
  "contraceptionImpact": "impact concret sur la pilule (absorption, enzymes, etc.)",
  "recommendation": {
    "timing": "conseil pratique (ex : 'Aucun espacement n√©cessaire' / 'Espace de 3‚Äì4 h' / '√âvite l‚Äôassociation, pr√©servatif X jours/semaines')",
    "alternative": "si risque moyen/√©lev√© : produit(s) plus s√ªrs en France ; sinon cha√Æne vide"
  }
}
Rappelle-toi : si les bases fiables ne signalent pas d‚Äôinteraction cliniquement significative ‚Üí "faible" plut√¥t que "inconnu".
Si le produit correspond √† une marque contenant un actif connu (ex. millepertuis), classe selon l‚Äôactif.

Contexte:
- Contraception: "${contraceptiveRef.current || "non pr√©cis√©"}"
- Heure/m√©thode: "${intakeTimeRef.current || "non pr√©cis√©"}"
- Produit: "${canonical}"

Utilise des sources publiques fiables (ANSM, EMA, Vidal, DrugBank, NHS, BNF). Les URLs doivent √™tre valides (https).
`.trim();

    try {
      const response: GenerateContentResponse = await withRetry(
        () =>
          (ai as GoogleGenAI).models.generateContent({
            model: "gemini-1.5-flash",
            contents: [{ role: "user", parts: [{ text: prompt }] }],
            config: { responseMimeType: "application/json", temperature: 0.2 },
          }),
        3,
        650
      );

      const rawText =
        (response as any)?.text?.trim?.() ||
        (response as any)?.response?.text?.()?.trim?.() ||
        "";

      if (!rawText) {
        addBotMessage("Je n‚Äôai pas r√©ussi √† obtenir une r√©ponse. R√©essaie avec le nom exact du produit üôè");
        return;
      }

      const body = stripCodeFences(rawText);
      let parsed: InteractionResult | null = tryParseJsonLoose(body);
      if (!parsed?.interactionLevel) {
        addBotMessage("R√©ponse incompl√®te. Peux-tu pr√©ciser la forme/marque exacte du produit ?");
        return;
      }

      const looksLike = (needle: string) =>
        similar(product, needle) || deburr(product).includes(deburr(needle));

      if (parsed.interactionLevel === "inconnu") {
        if (looksLike("millepertuis") || looksLike("hypericum")) parsed = { ...LOCAL_KB["millepertuis (Hypericum perforatum)"], explanation: `${LOCAL_KB["millepertuis (Hypericum perforatum)"].explanation} (d√©tection tol√©rante aux fautes et marques).` };
        if (looksLike("rifampicine") || looksLike("rifampin")) parsed = { ...LOCAL_KB["rifampicine"], explanation: `${LOCAL_KB["rifampicine"].explanation} (d√©tection tol√©rante aux fautes et marques).` };
        if (looksLike("charbon") || looksLike("activated charcoal")) parsed = { ...LOCAL_KB["charbon activ√©"], explanation: `${LOCAL_KB["charbon activ√©"].explanation} (d√©tection tol√©rante aux fautes et marques).` };
      }

      const adapted = adaptAnalysisToContext(parsed);
      addBotMessage("Merci d'avoir patient√©. Voici l'analyse :", adapted);
    } catch (err: any) {
      const message = err?.message || "Erreur inconnue";
      addBotMessage(`D√©sol√©e, une erreur est survenue lors de l'analyse (${message}). R√©essaie dans un instant üôè`);
    }
  }

  // ---------------- Render ----------------
  return (
    <div className="pm-app">
      {!ai && (
        <div className="error-banner">
          Cl√© API manquante (VITE_API_KEY / VITE_GEMINI_API_KEY). L'application ne peut pas fonctionner.
        </div>
      )}

      <div className="messages-list">
        {messages.map((msg) => (
          <div key={msg.id} className={`message-bubble ${msg.sender === "bot" ? "bot-message" : "user-message"}`}>
            {msg.text && <p>{msg.text}</p>}
            {msg.analysis && (
              <div className={`analysis-card level-${msg.analysis.interactionLevel}`}>
                <div className="analysis-header">
                  <span className="level-emoji" aria-hidden>{badgeMeta(msg.analysis.interactionLevel).emoji}</span>
                  <div className="header-text">
                    <h4>Niveau d'interaction : {badgeMeta(msg.analysis.interactionLevel).label}</h4>
                    <h5>{msg.analysis.title}</h5>
                  </div>
                </div>

                {(intakeTimeRef.current?.toLowerCase().includes("diffusion") ||
                  /implant|anneau|patch|st√©rilet|sterilet/i.test(contraceptiveRef.current || "")) && (
                    <div className="analysis-section hint">
                      <strong>Contexte :</strong>{" "}
                      <span>Ta contraception est √† diffusion continue. Les recommandations en tiennent compte. ‚ú®</span>
                    </div>
                )}

                {msg.analysis.interactionLevel === "grave" && (
                  <div className="analysis-section redflag">
                    <strong>‚ö†Ô∏è √Ä faire maintenant</strong>
                    <ul>
                      <li>√âvite l‚Äôassociation ou utilise une m√©thode barri√®re pendant la prise.</li>
                      <li>Continue la protection <em>apr√®s</em> l‚Äôarr√™t (voir timing ci-dessous).</li>
                      <li>
                        Si rapport non prot√©g√© r√©cent : renseigne-toi sur la{" "}
                        <a href="https://www.choisirsacontraception.fr/la-contraception/contraception-durgence/" target="_blank" rel="noopener noreferrer">
                          contraception d‚Äôurgence
                        </a>.
                      </li>
                    </ul>
                  </div>
                )}

                <div className="analysis-section">
                  <strong>Pourquoi ?</strong>
                  <p>{msg.analysis.explanation}</p>
                </div>

                <div className="analysis-section">
                  <strong>Impact sur ta contraception</strong>
                  <p>{msg.analysis.contraceptionImpact}</p>
                </div>

                <div className="analysis-section recommendation">
                  <strong>Recommandation</strong>
                  <p>{msg.analysis.recommendation.timing}</p>
                  {msg.analysis.recommendation.alternative && msg.analysis.recommendation.alternative.trim() && (
                    <p><strong>Alternative : </strong>{msg.analysis.recommendation.alternative}</p>
                  )}
                </div>

                <div className="analysis-section sources">
                  <p><strong>Sources : </strong>{msg.analysis.scientificBasis}</p>
                  <ul>
                    {msg.analysis.sources
                      .filter((s) => typeof s?.url === "string" && /^https?:\/\//i.test(s.url))
                      .map((source) => (
                        <li key={`${source.name}-${source.url}`}>
                          <a href={source.url} target="_blank" rel="noopener noreferrer">{source.name}</a>
                        </li>
                      ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
        ))}
        {isBotTyping && (
          <div className="message-bubble bot-message">
            <div className="typing-indicator"><span></span><span></span><span></span></div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <form className="chat-input-form" onSubmit={handleSendMessage}>
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder={isBotTyping ? "Lou est en train d'√©crire..." : "√âcris ton message..."}
          disabled={isBotTyping || conversationStage === "GREETING" || !ai}
          aria-label="Zone de saisie du message"
        />
        <button type="submit" disabled={!inputValue.trim() || isBotTyping || !ai} aria-label="Envoyer">
          <span className="icon">send</span>
        </button>
      </form>

      <p className="pm-privacy">Tes infos restent priv√©es. Ce service ne remplace pas l‚Äôavis d‚Äôun professionnel de sant√©.</p>
    </div>
  );
}
