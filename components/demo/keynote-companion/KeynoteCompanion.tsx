/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
import { useState, useEffect, useRef } from 'react';
import { GoogleGenAI, GenerateContentResponse } from '@google/genai';
import { useUser, useUI } from '@/lib/state';

// -------------- API KEY --------------
const API_KEY =
  import.meta.env.VITE_API_KEY ||
  import.meta.env.VITE_GEMINI_API_KEY ||
  import.meta.env.GEMINI_API_KEY ||
  '';

let ai: GoogleGenAI | null = null;
if (API_KEY) {
  ai = new GoogleGenAI({ apiKey: API_KEY });
}

// -------------- Types --------------
type ConversationStage =
  | 'GREETING'
  | 'AWAITING_CONTRACEPTION'
  | 'AWAITING_PRODUCT'
  | 'PROCESSING'
  | 'DONE';

type Message = {
  id: string;
  sender: 'bot' | 'user';
  text?: string;
  analysis?: InteractionResult;
};

type InteractionLevel = 'faible' | 'moyen' | 'grave' | 'inconnu';

type InteractionResult = {
  interactionLevel: InteractionLevel;
  title: string;
  explanation: string;
  scientificBasis: string;
  sources: { name: string; url: string }[];
  contraceptionImpact: string;
  recommendation: {
    timing: string;
    alternative: string;
  };
};

// -------------- Helpers: emojis & badges --------------
function badgeMeta(level: InteractionLevel) {
  switch (level) {
    case 'faible':
      return { emoji: 'üü¢', icon: 'check_circle', label: 'Faible' };
    case 'moyen':
      return { emoji: 'üü†', icon: 'warning', label: 'Mod√©r√©e' };
    case 'grave':
      return { emoji: 'üî¥', icon: 'error', label: '√âlev√©e' };
    case 'inconnu':
    default:
      return { emoji: '‚ö™', icon: 'help', label: 'Inconnue' };
  }
}

// -------------- Normalisation produit + KB locale --------------
function normalizeProduct(raw: string): { canonical: string; synonyms: string[] } {
  const s = raw.toLowerCase().trim();

  const table = [
    { canonical: 'fer (sels ferreux: sulfate, gluconate)', synonyms: ['fer', 'cure de fer', 'compl√©ment fer', 'fer bisglycinate', 'sulfate de fer', 'gluconate de fer'] },
    { canonical: 'parac√©tamol', synonyms: ['doliprane', 'efferalgan', 'dafalgan', 'paracetamol', 'parac√©tamol'] },
    { canonical: 'ibuprof√®ne', synonyms: ['ibuprofene', 'ibuprofen', 'nurofen', 'advil'] },
    { canonical: 'millepertuis (Hypericum perforatum)', synonyms: ['millepertuis', 'hypericum', 'hypericum perforatum', 'st john', 'st. john'] },
    { canonical: 'rifampicine', synonyms: ['rifampicine', 'rifampin'] },
    { canonical: 'charbon activ√©', synonyms: ['charbon', 'charbon active', 'charcoal', 'activated charcoal'] },
    { canonical: 'l√©vothyroxine', synonyms: ['levothyrox', 'l√©vothyrox', 'levothyroxine', 'levothyrox¬Æ'] },
    { canonical: 'amoxicilline', synonyms: ['amoxicilline', 'amoxicillin'] },
    { canonical: 'vitamine c (acide ascorbique)', synonyms: ['vitamine c', 'acide ascorbique', 'vit c'] },
    { canonical: 'collag√®ne', synonyms: ['collagene', 'cure collag√®ne', 'lux√©ol 3 mois', 'luxeol', 'lux√©ol'] },
  ];

  for (const row of table) {
    if (row.synonyms.some((k) => s.includes(k))) return row;
  }
  return { canonical: raw.trim(), synonyms: [] };
}

type KBItem = InteractionResult;

const LOCAL_KB: Record<string, KBItem> = {
  'fer (sels ferreux: sulfate, gluconate)': {
    interactionLevel: 'faible',
    title: "Fer et contraception hormonale : pas d'interaction cliniquement significative",
    explanation:
      "Le fer est absorb√© dans l‚Äôintestin et n‚Äôactive pas les enzymes du foie qui √©liminent les hormones de la pilule. Il ne r√©duit donc pas l‚Äôefficacit√© contraceptive.",
    scientificBasis:
      "Bas√© sur la litt√©rature pharmacologique et l‚Äôabsence de signal d‚Äôinteraction dans ANSM, Vidal et DrugBank.",
    sources: [
      { name: 'ANSM ‚Äì Monographies', url: 'https://ansm.sante.fr' },
      { name: 'Vidal ‚Äì Interactions', url: 'https://www.vidal.fr' },
      { name: 'DrugBank ‚Äì Ferrous sulfate', url: 'https://go.drugbank.com' },
    ],
    contraceptionImpact: "Aucun effet attendu sur les voies m√©taboliques des estroprogestatifs.",
    recommendation: {
      timing: "Aucun espacement n√©cessaire pour la contraception. Tu peux espacer si tu veux optimiser l‚Äôabsorption du fer (√©viter caf√©/th√© juste avant).",
      alternative: '',
    },
  },
  'millepertuis (Hypericum perforatum)': {
    interactionLevel: 'grave',
    title: "Millepertuis et contraception : interaction majeure",
    explanation:
      "Le millepertuis acc√©l√®re l‚Äô√©limination de nombreux m√©dicaments (CYP3A4, P-gp). Les hormones de la pilule sont √©limin√©es plus vite ‚Üí efficacit√© r√©duite.",
    scientificBasis: 'Interaction bien document√©e par les agences de sant√©.',
    sources: [
      { name: 'ANSM ‚Äì Avertissements Millepertuis', url: 'https://ansm.sante.fr' },
      { name: 'EMA ‚Äì Monograph: St John‚Äôs wort', url: 'https://www.ema.europa.eu' },
    ],
    contraceptionImpact:
      "Baisse des taux hormonaux ‚Üí risque de grossesse.",
    recommendation: {
      timing:
        "√âvite l‚Äôassociation. Si d√©j√† pris : pr√©servatif pendant toute la prise + 2 semaines apr√®s l‚Äôarr√™t.",
      alternative:
        "Options non inductrices pour l‚Äôhumeur/sommeil (ex. magn√©sium, m√©latonine courte dur√©e) ‚Äî √† valider avec un pro de sant√©.",
    },
  },
  rifampicine: {
    interactionLevel: 'grave',
    title: 'Rifampicine et contraception : interaction majeure',
    explanation:
      "Puissant inducteur enzymatique : les concentrations d‚Äô√©thinylestradiol/progestatifs chutent fortement.",
    scientificBasis: 'Interaction classique et bien connue.',
    sources: [
      { name: 'ANSM ‚Äì Rifampicine', url: 'https://ansm.sante.fr' },
      { name: 'Vidal ‚Äì Interactions rifampicine', url: 'https://www.vidal.fr' },
    ],
    contraceptionImpact: 'Risque √©lev√© d‚Äô√©chec contraceptif.',
    recommendation: {
      timing:
        "√âviter avec les pilules classiques. Utiliser double protection durant la cure + 4 semaines apr√®s.",
      alternative:
        "M√©thodes moins d√©pendantes du CYP (DIU cuivre/hormonal) ‚Äî √† discuter avec un pro.",
    },
  },
  'parac√©tamol': {
    interactionLevel: 'faible',
    title: "Parac√©tamol et contraception : pas d'interaction significative",
    explanation:
      "Aux doses usuelles, le parac√©tamol ne modifie pas significativement l‚Äô√©limination des hormones de la pilule.",
    scientificBasis: 'Consensus monographies et bases d‚Äôinteractions.',
    sources: [
      { name: 'ANSM ‚Äì Parac√©tamol', url: 'https://ansm.sante.fr' },
      { name: 'Vidal ‚Äì Parac√©tamol', url: 'https://www.vidal.fr' },
    ],
    contraceptionImpact: "Aucun impact attendu sur l‚Äôefficacit√©.",
    recommendation: {
      timing: 'Aucun espacement n√©cessaire.',
      alternative: '',
    },
  },
  'charbon activ√©': {
    interactionLevel: 'moyen',
    title: 'Charbon activ√© et contraception : possible r√©duction de l‚Äôabsorption',
    explanation:
      "Le charbon adsorbe des mol√©cules dans l‚Äôintestin. Pris trop pr√®s de la pilule, il peut en diminuer l‚Äôabsorption.",
    scientificBasis: 'Principe d‚Äôadsorption intestinal document√©.',
    sources: [{ name: 'ANSM ‚Äì Charbon activ√©', url: 'https://ansm.sante.fr' }],
    contraceptionImpact: 'Risque de moindre absorption si prises concomitantes.',
    recommendation: {
      timing:
        'S√©pare d‚Äôau moins 3‚Äì4 heures avec la pilule. Si prises trop proches : pr√©servatif 7 jours.',
      alternative: '',
    },
  },
  'vitamine c (acide ascorbique)': {
    interactionLevel: 'faible',
    title: "Vitamine C et contraception : pas d'interaction significative",
    explanation:
      "Aux doses usuelles, la vitamine C n‚Äôinduit ni n‚Äôinhibe de fa√ßon notable le m√©tabolisme des estroprogestatifs.",
    scientificBasis: 'Absence de signal d‚Äôinteraction dans les bases majeures.',
    sources: [
      { name: 'ANSM ‚Äì Vitamine C', url: 'https://ansm.sante.fr' },
      { name: 'Vidal ‚Äì Vitamine C', url: 'https://www.vidal.fr' },
    ],
    contraceptionImpact: 'Aucun impact significatif attendu sur l‚Äôefficacit√©.',
    recommendation: { timing: 'Aucun espacement n√©cessaire.', alternative: '' },
  },
  'collag√®ne': {
    interactionLevel: 'faible',
    title: "Collag√®ne et contraception : pas d'interaction attendue",
    explanation:
      "Le collag√®ne est une prot√©ine/peptides sans effet inducteur ou inhibiteur document√© sur le m√©tabolisme des hormones de la pilule.",
    scientificBasis: 'Absence de signal d‚Äôinteraction dans la litt√©rature et bases.',
    sources: [
      { name: 'ANSM ‚Äì Compl√©ments', url: 'https://ansm.sante.fr' },
      { name: 'Vidal ‚Äì Compl√©ments', url: 'https://www.vidal.fr' },
    ],
    contraceptionImpact: 'Impact n√©gligeable attendu.',
    recommendation: { timing: 'Pas de contrainte particuli√®re.', alternative: '' },
  },
};

// -------------- Component --------------
export default function PillMatchChat() {
  const { contraceptive, intakeTime, setContraceptive, setIntakeTime } = useUser();
  const { isBotTyping, setIsBotTyping } = useUI();

  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [conversationStage, setConversationStage] =
    useState<ConversationStage>('GREETING');
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  useEffect(scrollToBottom, [messages, isBotTyping]);

  useEffect(() => {
    if (conversationStage === 'GREETING') {
      setIsBotTyping(true);
      setTimeout(() => {
        addBotMessage('Bonjour ! Je suis Lou, ton assistante personnelle de sant√© ü§ù');
        setTimeout(() => {
          addBotMessage(
            'Quelle contraception hormonale utilises-tu, et √† quelle heure tu la prends ? (ou dis-moi si c‚Äôest une diffusion continue) ‚è∞'
          );
          setIsBotTyping(false);
          setConversationStage('AWAITING_CONTRACEPTION');
        }, 1000);
      }, 600);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const addBotMessage = (text: string, analysis?: InteractionResult) => {
    setMessages((prev) => [
      ...prev,
      { id: `${Date.now()}-${Math.random()}`, sender: 'bot', text, analysis },
    ]);
  };

  const addUserMessage = (text: string) => {
    const newUserMessage: Message = {
      id: `${Date.now()}-${Math.random()}`,
      sender: 'user',
      text,
    };
    setMessages((prev) => [...prev, newUserMessage]);
    return newUserMessage;
  };

  // ----------- Send message -----------
  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || isBotTyping) return;

    addUserMessage(inputValue);
    const currentUserInput = inputValue.trim();
    setInputValue('');

    if (conversationStage === 'AWAITING_CONTRACEPTION') {
      setIsBotTyping(true);

      // Diffusion continue
      const isContinuous =
        /diffusion continue|implant|st√©rilet|sterilet|patch|anneau/i.test(currentUserInput);

      // Heure : "√† 8h", "8 h", "07h30", "vers 20h", etc.
      const timeMatch = currentUserInput.match(
        /(?:\b(?:√†|a|@|vers)\s*)?([01]?\d|2[0-3])\s*h(?:([0-5]\d))?/i
      );
      const timeText = timeMatch ? `${timeMatch[1]}h${timeMatch[2] ? timeMatch[2] : ''}` : '';

      // Marque/type = texte - heure - mots parasites
      let brandRaw = currentUserInput
        .replace(/(?:\b(?:√†|a|@|vers)\s*)?([01]?\d|2[0-3])\s*h(?:([0-5]\d))?/gi, '')
        .replace(/\bet\b/gi, ' ')
        .replace(/[,\.;:]/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();

      // Normalisation simple
      const normalizeMap: Record<string, string> = {
        'ludeal g': 'Lud√©al G√©',
        'ludeal ge': 'Lud√©al G√©',
        'ludeal': 'Lud√©al G√©',
        'leeloo': 'Leeloo',
        'optilova': 'Optilova',
        'minidril': 'Minidril',
        'jasminelle': 'Jasminelle',
        'desogestrel': 'D√©sogestrel',
        'optimizette': 'Optimizette',
        'trinordiol': 'Trinordiol',
      };
      const key = brandRaw.toLowerCase();
      const brand = normalizeMap[key] || brandRaw;

      // 1) Diffusion continue
      if (isContinuous) {
        setContraceptive(brand || 'Contraception √† diffusion continue');
        setIntakeTime('Diffusion continue');
        setTimeout(() => {
          addBotMessage('Merci, tu utilises une contraception √† diffusion continue. C‚Äôest not√© ‚úÖ');
          setTimeout(() => {
            addBotMessage('Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä');
            setIsBotTyping(false);
            setConversationStage('AWAITING_PRODUCT');
          }, 500);
        }, 300);
        return;
      }

      // 2) Compl√©tions si moiti√© d√©j√† fournie
      if (!brand && timeText && contraceptive && !intakeTime) {
        setIntakeTime(timeText);
        setTimeout(() => {
          addBotMessage(`Parfait, c‚Äôest not√© : ${contraceptive} √† ${timeText} ‚úÖ`);
          setTimeout(() => {
            addBotMessage('Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä');
            setIsBotTyping(false);
            setConversationStage('AWAITING_PRODUCT');
          }, 500);
        }, 300);
        return;
      }
      if (brand && !timeText && !contraceptive && intakeTime) {
        setContraceptive(brand);
        setTimeout(() => {
          addBotMessage(`Parfait, c‚Äôest not√© : ${brand} √† ${intakeTime} ‚úÖ`);
          setTimeout(() => {
            addBotMessage('Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä');
            setIsBotTyping(false);
            setConversationStage('AWAITING_PRODUCT');
          }, 500);
        }, 300);
        return;
      }

      // 3) Marque + heure
      if (brand && timeText) {
        setContraceptive(brand);
        setIntakeTime(timeText);
        setTimeout(() => {
          addBotMessage(`Parfait, c‚Äôest not√© : ${brand} √† ${timeText} ‚úÖ`);
          setTimeout(() => {
            addBotMessage('Quel m√©dicament, compl√©ment ou plante souhaites-tu v√©rifier ? üåøüíä');
            setIsBotTyping(false);
            setConversationStage('AWAITING_PRODUCT');
          }, 500);
        }, 300);
        return;
      }

      // 4) Marque seule
      if (brand && !timeText) {
        setContraceptive(brand);
        setTimeout(() => {
          addBotMessage(`Super, tu utilises ${brand}. √Ä quelle heure la prends-tu ? (ex : 8h ou 20h) ‚è∞`);
          setIsBotTyping(false);
        }, 300);
        return;
      }

      // 5) Heure seule
      if (!brand && timeText) {
        setIntakeTime(timeText);
        setTimeout(() => {
          addBotMessage('Merci ! Et peux-tu me pr√©ciser la marque ou le type de ta contraception ? (ex : Leeloo, Optilova, implant‚Ä¶)');
          setIsBotTyping(false);
        }, 300);
        return;
      }

      // 6) Fallback
      setTimeout(() => {
        addBotMessage('Tu peux me dire la marque/type de ta contraception ET l‚Äôheure de prise ? Par ex. : Leeloo √† 8h, Optilova √† 20h, ou implant (diffusion continue).');
        setIsBotTyping(false);
      }, 300);
      return;
    }

    if (conversationStage === 'AWAITING_PRODUCT') {
      setConversationStage('PROCESSING');
      setIsBotTyping(true);
      await handleCheckInteraction(currentUserInput);
      setIsBotTyping(false);
      setConversationStage('AWAITING_PRODUCT');
      return;
    }
  };

  // -------- Helpers parsing/cleanup --------
  function stripCodeFences(s: string) {
    const fenceRegex = /^```(?:json)?\s*([\s\S]*?)\s*```$/i;
    const m = s.match(fenceRegex);
    return m?.[1]?.trim() ?? s.trim();
  }

  function tryParseJsonLoose(txt: string): any | null {
    try {
      return JSON.parse(txt);
    } catch {
      const fixed = txt.replace(/,\s*([}\]])/g, '$1');
      try {
        return JSON.parse(fixed);
      } catch {
        return null;
      }
    }
  }

  function sanitizeSources(sources: { name: string; url: string }[] | undefined) {
    if (!Array.isArray(sources)) return [];
    return sources.filter((s) => typeof s?.url === 'string' && /^https?:\/\//i.test(s.url));
  }

  // Post-traitement : adapter le conseil selon diffusion continue / niveau
  function adaptAnalysisToContext(result: InteractionResult): InteractionResult {
    const isContinuous =
      (intakeTime || '').toLowerCase().includes('diffusion') ||
      /implant|anneau|patch|st√©rilet|sterilet/i.test(contraceptive || '');

    const out: InteractionResult = {
      ...result,
      sources: sanitizeSources(result.sources),
      recommendation: { ...result.recommendation },
    };

    // R√®gles g√©n√©riques d‚Äôespacement si pas explicitement donn√©
    if (!out.recommendation.timing || !out.recommendation.timing.trim()) {
      if (result.interactionLevel === 'faible') {
        out.recommendation.timing = 'Aucun espacement n√©cessaire.';
      } else if (result.interactionLevel === 'moyen') {
        out.recommendation.timing = 'S√©pare d‚Äôau moins 3‚Äì4 heures avec ta contraception.';
      } else if (result.interactionLevel === 'grave') {
        out.recommendation.timing = '√âvite l‚Äôassociation. Utilise une m√©thode barri√®re et demande conseil √† un pro de sant√©.';
      } else {
        out.recommendation.timing = 'Donn√©es limit√©es : demande l‚Äôavis de ton pharmacien/m√©decin.';
      }
    }

    // Ajustement pour diffusion continue : rappeler le risque global
    if (isContinuous && result.interactionLevel !== 'faible') {
      out.explanation = `${out.explanation} Dans ton cas (diffusion continue), le risque d‚Äôinteraction concerne toute la dur√©e d‚Äôaction du dispositif.`;
    }

    return out;
  }

  // ---------- Appel IA + KB ----------
  const handleCheckInteraction = async (product: string) => {
    if (!product?.trim()) {
      addBotMessage('Peux-tu me donner le nom du m√©dicament ou compl√©ment √† v√©rifier ? üòä');
      return;
    }

    // 1) KB locale (r√©ponse instant)
    const norm = normalizeProduct(product);
    const canonical = norm.canonical;
    const kbHit = LOCAL_KB[canonical];
    if (kbHit) {
      addBotMessage("Merci d'avoir patient√©. Voici l'analyse :", adaptAnalysisToContext(kbHit));
      return;
    }

    // 2) IA si pas dans la KB
    if (!ai) {
      addBotMessage(
        'D√©sol√©e, je ne peux pas faire la v√©rification pour le moment. Cl√© API manquante (VITE_API_KEY / VITE_GEMINI_API_KEY).'
      );
      return;
    }

    // Prompt orient√© p√©dagogie + spacing + alternatives
    const prompt = `
Tu es "Lou", une coach sant√© claire et rassurante. Tu analyses l'interaction entre une contraception hormonale et un produit.
R√©ponds en UN SEUL objet JSON strict (pas de Markdown), en fran√ßais, avec ce sch√©ma :
{
  "interactionLevel": "faible" | "moyen" | "grave" | "inconnu",
  "title": "verdict court et clair",
  "explanation": "vulgarisation simple : 2-3 phrases max (tutoie)",
  "scientificBasis": "phrase sur les sources utilis√©es",
  "sources": [ { "name": "nom source", "url": "https://..." } ],
  "contraceptionImpact": "impact concret sur la pilule (absorption, enzymes, etc.)",
  "recommendation": {
    "timing": "conseil pratique (ex : 'Aucun espacement n√©cessaire' / 'Espace de 3‚Äì4 h' / '√âvite l‚Äôassociation, pr√©servatif X jours/semaines')",
    "alternative": "si risque moyen/√©lev√© : produit(s) plus s√ªrs en France ; sinon cha√Æne vide"
  }
}
Rappelle-toi : si les bases fiables ne signalent pas d‚Äôinteraction cliniquement significative ‚Üí 'faible' plut√¥t que 'inconnu' et explique pourquoi.

Contexte:
- Contraception: "${contraceptive || 'non pr√©cis√©'}"
- Heure/m√©thode: "${intakeTime || 'non pr√©cis√©'}"
- Produit: "${canonical}"

Utilise des sources publiques fiables (ANSM, EMA, Vidal, DrugBank, NHS, BNF). Les URLs doivent √™tre valides (https).
`.trim();

    try {
      const response: GenerateContentResponse = await ai.models.generateContent({
        model: 'gemini-1.5-flash',
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
        config: { responseMimeType: 'application/json', temperature: 0.2 },
      });

      const rawText =
        (response as any)?.text?.trim?.() ||
        (response as any)?.response?.text?.()?.trim?.() ||
        '';

      if (!rawText) {
        addBotMessage('Je n‚Äôai pas r√©ussi √† obtenir une r√©ponse. R√©essaie avec le nom exact du produit üôè');
        return;
      }

      const body = stripCodeFences(rawText);
      let parsed: InteractionResult | null = tryParseJsonLoose(body);

      if (!parsed?.interactionLevel) {
        addBotMessage("R√©ponse incompl√®te. Peux-tu pr√©ciser la forme/marque exacte du produit ?");
        return;
      }

      const adapted = adaptAnalysisToContext(parsed);
      addBotMessage("Merci d'avoir patient√©. Voici l'analyse :", adapted);
    } catch (err: any) {
      const message = err?.message || 'Erreur inconnue';
      addBotMessage(`D√©sol√©e, une erreur est survenue lors de l'analyse (${message}). R√©essaie dans un instant üôè`);
    }
  };

  // ---------- UI helpers ----------
  const getStatusIcon = (level: InteractionLevel) => badgeMeta(level).icon;

  // -------------- Render --------------
  return (
    <div className="chat-container">
      <div className="lou-character-container">
        <div className="lou-character lou-blob-1"></div>
        <div className="lou-character lou-blob-2"></div>
        <div className="lou-character lou-blob-3"></div>
      </div>

      {!ai && (
        <div className="error-banner">
          Cl√© API manquante (VITE_API_KEY / VITE_GEMINI_API_KEY). L'application ne peut pas fonctionner.
        </div>
      )}

      <div className="messages-list">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`message-bubble ${msg.sender === 'bot' ? 'bot-message' : 'user-message'}`}
          >
            {msg.text && <p>{msg.text}</p>}
            {msg.analysis && (
              <div className={`analysis-card level-${msg.analysis.interactionLevel}`}>
                <div className="analysis-header">
                  <span className="level-emoji" aria-hidden>
                    {badgeMeta(msg.analysis.interactionLevel).emoji}
                  </span>
                  <span className={`icon level-icon`}>{getStatusIcon(msg.analysis.interactionLevel)}</span>
                  <div className="header-text">
                    <h4>
                      Niveau d'interaction : {badgeMeta(msg.analysis.interactionLevel).label}
                    </h4>
                    <h5>{msg.analysis.title}</h5>
                  </div>
                </div>

                {/* Contraception context note */}
                {(intakeTime?.toLowerCase().includes('diffusion') ||
                  /implant|anneau|patch|st√©rilet|sterilet/i.test(contraceptive || '')) && (
                  <div className="analysis-section hint">
                    <strong>Contexte :</strong>{' '}
                    <span>
                      Ta contraception est √† diffusion continue. Les recommandations tiennent compte de ce mode d‚Äôaction. ‚ú®
                    </span>
                  </div>
                )}

                <div className="analysis-section">
                  <strong>Pourquoi ?</strong>
                  <p>{msg.analysis.explanation}</p>
                </div>

                <div className="analysis-section">
                  <strong>Impact sur ta contraception</strong>
                  <p>{msg.analysis.contraceptionImpact}</p>
                </div>

                <div className="analysis-section recommendation">
                  <strong>
                    <span className="icon">recommend</span> Recommandation
                  </strong>
                  <p>{msg.analysis.recommendation.timing}</p>
                  {msg.analysis.recommendation.alternative && msg.analysis.recommendation.alternative.trim() && (
                    <p>
                      <strong>Alternative : </strong>
                      {msg.analysis.recommendation.alternative}
                    </p>
                  )}
                </div>

                <div className="analysis-section sources">
                  <p>
                    <strong>Sources : </strong>
                    {msg.analysis.scientificBasis}
                  </p>
                  <ul>
                    {msg.analysis.sources
                      .filter((s) => typeof s?.url === 'string' && /^https?:\/\//i.test(s.url))
                      .map((source) => (
                        <li key={`${source.name}-${source.url}`}>
                          <a href={source.url} target="_blank" rel="noopener noreferrer">
                            {source.name}
                          </a>
                        </li>
                      ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
        ))}
        {isBotTyping && (
          <div className="message-bubble bot-message">
            <div className="typing-indicator">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <form className="chat-input-form" onSubmit={handleSendMessage}>
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder={isBotTyping ? "Lou est en train d'√©crire..." : '√âcris ton message...'}
          disabled={isBotTyping || conversationStage === 'GREETING' || !ai}
        />
        <button type="submit" disabled={!inputValue.trim() || isBotTyping || !ai}>
          <span className="icon">send</span>
        </button>
      </form>
    </div>
  );
}
